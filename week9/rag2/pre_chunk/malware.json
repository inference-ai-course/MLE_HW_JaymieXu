[
  {
    "id": "doc_mw_001",
    "title": "Malware Taxonomy and Infection Vectors",
    "content": "Malware encompasses families with distinct goals and operating styles. Trojans masquerade as legitimate software to deliver payloads; worms self-propagate across networks; spyware and keyloggers capture credentials and activity; adware monetizes attention; remote access tools provide interactive control; ransomware encrypts or steals data for extortion; rootkits conceal artifacts or hooks; and fileless strains live in memory or abuse trusted tools. Common entry points include phishing and malvertising, drive-by downloads via vulnerable browsers or plugins, exploitation of exposed services and weak credentials, abused remote management software, and poisoned software updates in supply chains. Once inside, operators often stage additional components, escalate privileges, discover shares and credentials, and pivot laterally. Observable signals include unexpected process trees (script interpreters spawning admin tools), unusual archive/encryption activity on shares, beacon-like outbound traffic, and tampering with logs or snapshots. Defenses emphasize reduction of initial attack surface, strong authentication, patching internet-facing services, application control, least privilege, segmentation, and high-fidelity telemetry tied to processes, identities, and data flows.",
    "category": "malware",
    "tags": ["taxonomy", "infection vectors", "initial access", "fileless", "rootkit"]
  },
  {
    "id": "doc_mw_002",
    "title": "Staging, Packers, and Anti-Analysis",
    "content": "Modern campaigns separate delivery from payload execution through staged loaders, which fetch or unpack code only after environment checks pass. Packers and crypters transform binaries to defeat static signatures; process injection and hollowing place code inside trusted hosts; DLL search-order hijacking and signed-binary proxying piggyback on legitimate components. Sandbox and analyst evasion uses delayed execution, user-interaction gates, VM and debugger checks, time-based triggers, and API usage that blends with routine activity. Fileless techniques leverage script engines, WMI, PowerShell, or in-memory reflectively loaded modules to minimize disk artifacts. These behaviors trade stealth for complexity, often leaving distinct traces: abnormal parent-child relationships, transient high-entropy buffers, memory regions with execute permissions but no backing file, or short-lived network connections preceding process tree changes. Countermeasures prioritize script logging and constrained language modes, AMSI or equivalent content inspection, memory scanning for anomalous sections, blocking risky LOLBins where possible, and detections keyed to behavior rather than specific tool names.",
    "category": "malware",
    "tags": ["stagers", "packers", "evasion", "process injection", "fileless"]
  },
  {
    "id": "doc_mw_003",
    "title": "Command-and-Control Patterns",
    "content": "Command-and-control (C2) channels coordinate tasking and exfiltration while attempting to resemble normal traffic. Common choices include HTTPS beacons with randomized jitter and User-Agents, DNS queries for tasking or rendezvous, and use of cloud storage or collaboration services as relays. Some operators rotate domains and IPs, use domain generation algorithms, or leverage content delivery for resilience. Beacons typically implement sleep intervals, campaign and host identifiers, and small task responses to stay quiet; bulk data movement may be chunked and compressed. Defenders benefit from correlating process lineage with outbound destinations, enforcing egress controls and authenticated proxies, alerting on first-time external connections from sensitive servers, and inspecting for protocol misuse (e.g., archivers making network calls). High-signal artifacts include rare destinations contacted by many hosts, identical timing patterns across machines, and sudden role changes of processes (office apps or interpreters initiating long-lived TLS sessions). Limiting direct internet access for servers and requiring service-to-service allowlists reduces viable C2 paths.",
    "category": "malware",
    "tags": ["C2", "beacons", "DNS", "HTTPS", "egress control"]
  },
  {
    "id": "doc_mw_004",
    "title": "Persistence and Lateral Movement Basics",
    "content": "Persistence ensures re-execution after reboot or logoff through mechanisms such as scheduled tasks, startup folders, run keys, launch daemons/services, service DLLs, browser extensions, and COM or WMI subscriptions. Kernel-level components and bootkits deepen stealth but require higher privileges and increase operational risk. Lateral movement frequently follows credential theft or token abuse, then remote service execution, SMB admin shares, RDP, WinRM/SSH, or orchestration tooling already present in the environment. Mature operations map trust relationships and target directory services, software distribution systems, and backup control planes to expand reach and disrupt recovery. Effective defenses emphasize hardened admin workstations, credential hygiene (no reuse, no cached high-privilege secrets), constrained delegation, segmentation between user and admin planes, and detections keyed to unusual admin tool usage, new services created remotely, and rapid creation of scheduled tasks across hosts. Incident responders prioritize isolating compromised principals, rotating secrets, and validating persistence points before restoring service.",
    "category": "malware",
    "tags": ["persistence", "lateral movement", "credentials", "services", "segmentation"]
  },
  {
    "id": "doc_mw_005",
    "title": "Cloud and Container-Focused Malware",
    "content": "Malware targeting cloud and container ecosystems exploits misconfigured identities, exposed dashboards, weak supply-chain controls, and overly permissive network paths. Common goals include crypto-mining, theft of access keys or tokens, and staging for broader campaigns. Techniques involve harvesting instance metadata service tokens, abusing overly broad IAM roles, writing to container volumes mounted from the host, or escaping via vulnerable runtimes and plugins. Control planes become high-value because they propagate changes quickly; tampering with build pipelines or base images seeds many environments at once. Indicators include sudden spikes in CPU/network from workloads that usually sit idle, unexpected processes in minimal images, outbound traffic from build agents to new destinations, and creation of shadow service accounts or API keys. Protections favor least-privilege roles, workload identity boundaries, image signing and admission control, restrictive outbound egress, and runtime policies that block exec-into containers and disallow privilege escalation. Regular posture reviews catch drift in roles, network rules, and artifact provenance.",
    "category": "malware",
    "tags": ["cloud", "containers", "supply chain", "IAM", "runtime security"]
  },
  {
    "id": "doc_mw_006",
    "title": "Compiler-Level Obfuscation vs. LLM-Based Detection",
    "content": "Empirical evaluations show that compiler-level transformations can substantially degrade large-model judgments about malicious or vulnerable code. Obfuscation passes at the LLVM intermediate representation—such as control-flow flattening, bogus paths, instruction substitution, and basic-block splitting—alter structure while preserving behavior, reducing the reliability of token-sequence cues that general models tend to use. Reported results include notable drops in precision, recall, and specificity when the same function is analyzed before and after obfuscation, despite unchanged semantics. This suggests that analyses which rely mainly on textual structure are brittle under adversarial compilation and benefit from defenses like compiler-aware training, resilience testing with semantically equivalent variants, and integration of stronger program representations and provenance. Practical takeaways for defenders include treating obfuscation as a realistic evasion factor when evaluating model-assisted triage, favoring behavior-based detections, and maintaining human-in-the-loop review for high-risk decisions involving transformed code.",
    "category": "malware",
    "tags": ["obfuscation", "LLVM IR", "detection limits", "evaluation", "robustness"]
  }
]